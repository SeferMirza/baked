<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
#pragma warning disable SA1649 // File name should match first type name
namespace Domain.Business;
<# for (int i = 0; i < 200; ++i) { #>

public class <#= GetClassName(i) #>
{
    readonly IEntityContext<<#= GetClassName(i) #>> _context = default!;

    protected <#= GetClassName(i) #>() { }

    public <#= GetClassName(i) #>(IEntityContext<<#= GetClassName(i) #>> context) => _context = context;

    public virtual Guid Id { get; set; }
    public virtual string Name { get; set; } = default!;
    public virtual DateTime CreatedAt { get; set; }

    protected internal virtual <#= GetClassName(i) #> With(string name)
    {
        Name = name;

        return _context.Insert(this);
    }
<# for (int j = 0; j < 5; j++) { #>

    public virtual void Method_<#= j #>(string name_<#= j #>)
    {
        Name = name_<#= j #>;
    }

    protected internal virtual void Internal_Method_<#= j #>(string name_<#= j #>)
    {
        Name = name_<#= j #>;
    }
<# } #>
}

public class <#= GetQueryName(i) #>
{
    readonly IQueryContext<<#= GetClassName(i) #>> _queryContext;

    public <#= GetQueryName(i) #>(IQueryContext<<#= GetClassName(i) #>> queryContext) => _queryContext = queryContext;

<# for (int j = 0; j < 5; j++) { #>
    public List<<#= GetClassName(i) #>> By<#= j #>(string name_<#= j #>) => _queryContext.All();
    internal List<<#= GetClassName(i) #>> Internal_By<#= j #>(string name_<#= j #>) => _queryContext.All();
<# } #>
}
<# } #>
#pragma warning restore SA1649 // File name should match first type name
<#+
private string GetClassName(int i)
{
    return $"Entity_{i}";
}
private string GetQueryName(int i)
{
    return $"Entity_{i}s";
}
#>